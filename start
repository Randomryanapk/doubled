#!/data/data/com.termux/files/usr/bin/bash
__version__="1.0"

# --- Colors ---
GREEN="\033[32m"
RED="\033[31m"
RESET="\033[0m"

# --- Color Echos ---
green_echo() { echo -e "${GREEN}$1${RESET}"; }
red_echo()   { echo -e "${RED}$1${RESET}"; }

# --- Graceful Exit on Ctrl+C ---
trap 'red_echo "[!] Script interrupted."; exit 1' SIGINT

banner() {
  green_echo "=============================================="
  green_echo " Cloudflared + PHP on Termux [Webroot: your_site]"
  green_echo " v${__version__}"
  green_echo "=============================================="
}

# 1) Update Termux packages
termux_update() {
  green_echo "[+] Updating Termux packages..."
  yes | pkg update
  yes | pkg upgrade
}

# 2) Install dependencies: php, curl, jq
install_dependencies() {
  local packages=(php curl jq)
  for pkg_name in "${packages[@]}"; do
    if ! command -v "$pkg_name" &>/dev/null; then
      green_echo "[+] Installing $pkg_name..."
      yes | pkg install "$pkg_name"
    fi
  done
  green_echo "[+] Dependencies installed."
}

# 3) Kill existing php / cloudflared
kill_existing() {
  local procs=(php cloudflared)
  for p in "${procs[@]}"; do
    if pgrep "$p" &>/dev/null; then
      green_echo "[ - ] Killing existing $p..."
      pkill "$p"
    fi
  done
}

# 4) Download cloudflared matching device architecture
download_cloudflared() {
  mkdir -p .server
  cd .server || exit 1

  green_echo "[ - ] Downloading cloudflared..."
  local arch
  arch=$(uname -m)
  local url=""
  case "$arch" in
    arm|armv7l)
      url="https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm"
      ;;
    aarch64|armv8l)
      url="https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm64"
      ;;
    x86_64)
      url="https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64"
      ;;
    i686|i386)
      url="https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-386"
      ;;
    *)
      red_echo "[!] Unsupported architecture: $arch"
      exit 1
      ;;
  esac

  rm -f cloudflared
  curl -fsSL -o cloudflared "$url"
  if [ $? -ne 0 ]; then
    red_echo "[!] Failed to download cloudflared. Check your connection."
    exit 1
  fi

  chmod +x cloudflared
  cd ..
  green_echo "[ - ] cloudflared is ready."
}

# 5) Create the webroot: your_site/
setup_webroot() {
  local webroot="your_site"
  mkdir -p "$webroot"
  # If index doesn't exist, create a small one
  if [ ! -f "$webroot/index.php" ]; then
    echo "<?php echo 'Hello from your_site!';" > "$webroot/index.php"
  fi
}

# 6) Start PHP on 127.0.0.1:8080 with your_site as root
start_php_server() {
  green_echo "[ - ] Starting PHP server on http://127.0.0.1:8080 (root: your_site/)..."
  php -S 127.0.0.1:8080 -t your_site &>/dev/null &
  sleep 2
}

# 7) Start cloudflared & parse its output
start_cloudflared() {
  green_echo "[ - ] Launching cloudflared tunnel..."
  rm -f .server/.cld.log
  touch .server/.cld.log

  # Run cloudflared in background, capturing logs
  .server/cloudflared tunnel -url http://127.0.0.1:8080 2>&1 | tee .server/.cld.log &
  sleep 10

  local url
  url=$(grep -Eo 'https://[a-zA-Z0-9._-]+\.trycloudflare\.com' .server/.cld.log | head -n 1)
  if [ -n "$url" ]; then
    green_echo "[+] Public URL: $url"
    # If you want Telegram support, set TELEGRAM_BOT_TOKEN & TELEGRAM_CHAT_ID, then call send_to_telegram "$url"
  else
    red_echo "[!] Could not retrieve the Cloudflared URL. Check .server/.cld.log for errors."
  fi
}

main() {
  banner
  termux_update
  install_dependencies
  kill_existing
  download_cloudflared
  setup_webroot
  start_php_server
  start_cloudflared
  green_echo "[ - ] Done. Press Ctrl+C to exit or run 'pkill php && pkill cloudflared' to stop."
  tail -f /dev/null
}

main
